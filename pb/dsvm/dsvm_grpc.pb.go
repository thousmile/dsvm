// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: dsvm.proto

package dsvm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dsvm_InitSchemas_FullMethodName = "/dsvm.Dsvm/InitSchemas"
)

// DsvmClient is the client API for Dsvm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DsvmClient interface {
	// 需要初始化的Schema名称
	InitSchemas(ctx context.Context, in *InitSchemasRequest, opts ...grpc.CallOption) (*InitSchemasResponse, error)
}

type dsvmClient struct {
	cc grpc.ClientConnInterface
}

func NewDsvmClient(cc grpc.ClientConnInterface) DsvmClient {
	return &dsvmClient{cc}
}

func (c *dsvmClient) InitSchemas(ctx context.Context, in *InitSchemasRequest, opts ...grpc.CallOption) (*InitSchemasResponse, error) {
	out := new(InitSchemasResponse)
	err := c.cc.Invoke(ctx, Dsvm_InitSchemas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DsvmServer is the server API for Dsvm service.
// All implementations must embed UnimplementedDsvmServer
// for forward compatibility
type DsvmServer interface {
	// 需要初始化的Schema名称
	InitSchemas(context.Context, *InitSchemasRequest) (*InitSchemasResponse, error)
	mustEmbedUnimplementedDsvmServer()
}

// UnimplementedDsvmServer must be embedded to have forward compatible implementations.
type UnimplementedDsvmServer struct {
}

func (UnimplementedDsvmServer) InitSchemas(context.Context, *InitSchemasRequest) (*InitSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitSchemas not implemented")
}
func (UnimplementedDsvmServer) mustEmbedUnimplementedDsvmServer() {}

// UnsafeDsvmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DsvmServer will
// result in compilation errors.
type UnsafeDsvmServer interface {
	mustEmbedUnimplementedDsvmServer()
}

func RegisterDsvmServer(s grpc.ServiceRegistrar, srv DsvmServer) {
	s.RegisterService(&Dsvm_ServiceDesc, srv)
}

func _Dsvm_InitSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DsvmServer).InitSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dsvm_InitSchemas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DsvmServer).InitSchemas(ctx, req.(*InitSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dsvm_ServiceDesc is the grpc.ServiceDesc for Dsvm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dsvm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dsvm.Dsvm",
	HandlerType: (*DsvmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitSchemas",
			Handler:    _Dsvm_InitSchemas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsvm.proto",
}
